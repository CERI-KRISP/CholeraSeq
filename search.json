[
  {
    "objectID": "installation.html",
    "href": "installation.html",
    "title": "Installation Instructions for Nextflow, Docker, and Java JDK 17 LTS on Ubuntu",
    "section": "",
    "text": "In this document, we provide instructions (with minimal assumptions of target hardware) required by a user to initiate testing of the pipeline.\nIf you need to install this pipeline on a cluster (HPC or K8s) then please refer the to the nf-core docs and community.\n\n\n\n\n\n\nnf-core documentation\n\n\n\nAs the CholeraSeq pipeline uses nf-core template, the extensive documentation regarding installation, configuration and customization of the pipeline are applicable for CholeraSeq.\n\n\n\n\n\nUbuntu Linux (18.04 or newer recommended)\ncurl and wget installed\n\n\n\n\n\nNextflow requires Java 17 or later. Here, we install OpenJDK 17 LTS:\nsudo apt update\nsudo apt install -y openjdk-17-jdk\nThe java version should NOT be an internal jdk release! You can check the release via java --version Notice the LTS next to OpenJDK line.\n\n$ java -version\nopenjdk version \"17.0.7\" 2023-04-18 LTS\nOpenJDK Runtime Environment (build 17.0.7+7-LTS)\nOpenJDK 64-Bit Server VM (build 17.0.7+7-LTS, mixed mode, sharing)\n\n\n\n\n# Download Nextflow\ncurl -s https://get.nextflow.io | bash\n\n# Move Nextflow to a directory in your PATH\nsudo mv nextflow /usr/local/bin/\nVerify installation:\nnextflow -v\n\nnextflow run hello\n\n\n\n\n\n\n\nDocker or Singularity\n\n\n\nIf your system administrator has setup Singularity or Apptainer for you, then please use the -profile singularity or -profile apptainer option. For Step-3 and Step-4 we assume that, you do have admin access for your machine and can install packages.\n\n\n\n\n\n# Update package index\nsudo apt update\n\n# Install prerequisites\nsudo apt install -y \\\n  ca-certificates \\\n  curl \\\n  gnupg\n\n# Add Docker’s official GPG key\nsudo install -m 0755 -d /etc/apt/keyrings\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | \\\n  sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\n\n# Add Docker repository\necho \\\n  \"deb [arch=$(dpkg --print-architecture) \\\n  signed-by=/etc/apt/keyrings/docker.gpg] \\\n  https://download.docker.com/linux/ubuntu \\\n  $(lsb_release -cs) stable\" | \\\n  sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\n\n# Update package index again\nsudo apt update\n\n# Install Docker Engine\nsudo apt install -y docker-ce docker-ce-cli containerd.io\nVerify Docker installation:\nsudo docker run hello-world\n\n\n\n\nsudo usermod -aG docker $USER\n# Log out and log back in for group changes to take effect\n\nYou are now ready to use Nextflow with Docker and Java 17 on Ubuntu!\n\n\n\nThis profile should download a small dataset and the relevant containers to initiate the pipeline execution.\n# For users with access to docker containers\nnextflow run CERI-KRISP/CholeraSeq -profile test,docker --outdir test_output\n\n\n# For users with access to singularity containers\nnextflow run CERI-KRISP/CholeraSeq -profile test,singularity --outdir test_output",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "installation.html#prerequisites",
    "href": "installation.html#prerequisites",
    "title": "Installation Instructions for Nextflow, Docker, and Java JDK 17 LTS on Ubuntu",
    "section": "",
    "text": "Ubuntu Linux (18.04 or newer recommended)\ncurl and wget installed",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "installation.html#install-java-jdk-17-lts",
    "href": "installation.html#install-java-jdk-17-lts",
    "title": "Installation Instructions for Nextflow, Docker, and Java JDK 17 LTS on Ubuntu",
    "section": "",
    "text": "Nextflow requires Java 17 or later. Here, we install OpenJDK 17 LTS:\nsudo apt update\nsudo apt install -y openjdk-17-jdk\nThe java version should NOT be an internal jdk release! You can check the release via java --version Notice the LTS next to OpenJDK line.\n\n$ java -version\nopenjdk version \"17.0.7\" 2023-04-18 LTS\nOpenJDK Runtime Environment (build 17.0.7+7-LTS)\nOpenJDK 64-Bit Server VM (build 17.0.7+7-LTS, mixed mode, sharing)",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "installation.html#install-nextflow",
    "href": "installation.html#install-nextflow",
    "title": "Installation Instructions for Nextflow, Docker, and Java JDK 17 LTS on Ubuntu",
    "section": "",
    "text": "# Download Nextflow\ncurl -s https://get.nextflow.io | bash\n\n# Move Nextflow to a directory in your PATH\nsudo mv nextflow /usr/local/bin/\nVerify installation:\nnextflow -v\n\nnextflow run hello\n\n\n\n\n\n\n\nDocker or Singularity\n\n\n\nIf your system administrator has setup Singularity or Apptainer for you, then please use the -profile singularity or -profile apptainer option. For Step-3 and Step-4 we assume that, you do have admin access for your machine and can install packages.",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "installation.html#install-docker",
    "href": "installation.html#install-docker",
    "title": "Installation Instructions for Nextflow, Docker, and Java JDK 17 LTS on Ubuntu",
    "section": "",
    "text": "# Update package index\nsudo apt update\n\n# Install prerequisites\nsudo apt install -y \\\n  ca-certificates \\\n  curl \\\n  gnupg\n\n# Add Docker’s official GPG key\nsudo install -m 0755 -d /etc/apt/keyrings\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | \\\n  sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\n\n# Add Docker repository\necho \\\n  \"deb [arch=$(dpkg --print-architecture) \\\n  signed-by=/etc/apt/keyrings/docker.gpg] \\\n  https://download.docker.com/linux/ubuntu \\\n  $(lsb_release -cs) stable\" | \\\n  sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\n\n# Update package index again\nsudo apt update\n\n# Install Docker Engine\nsudo apt install -y docker-ce docker-ce-cli containerd.io\nVerify Docker installation:\nsudo docker run hello-world",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "installation.html#optional-manage-docker-as-a-non-root-user",
    "href": "installation.html#optional-manage-docker-as-a-non-root-user",
    "title": "Installation Instructions for Nextflow, Docker, and Java JDK 17 LTS on Ubuntu",
    "section": "",
    "text": "sudo usermod -aG docker $USER\n# Log out and log back in for group changes to take effect\n\nYou are now ready to use Nextflow with Docker and Java 17 on Ubuntu!",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "installation.html#run-the-test-profile-of-choleraseq",
    "href": "installation.html#run-the-test-profile-of-choleraseq",
    "title": "Installation Instructions for Nextflow, Docker, and Java JDK 17 LTS on Ubuntu",
    "section": "",
    "text": "This profile should download a small dataset and the relevant containers to initiate the pipeline execution.\n# For users with access to docker containers\nnextflow run CERI-KRISP/CholeraSeq -profile test,docker --outdir test_output\n\n\n# For users with access to singularity containers\nnextflow run CERI-KRISP/CholeraSeq -profile test,singularity --outdir test_output",
    "crumbs": [
      "Installation"
    ]
  },
  {
    "objectID": "usage.html",
    "href": "usage.html",
    "title": "Usage",
    "section": "",
    "text": "CholeraSeq: a pipeline for data analysis Cholera outbreaks.\n\n\nCERI-KRISP/CholeraSeq is a Nextflow pipeline for genomic data analysis of Cholera outbreaks.\n\n\n\n\n\n\nZenodo Dataset\n\n\n\n\n\nYou will need to create a samplesheet with information about the samples you would like to analyse before running the pipeline. Use this parameter to specify its location. It has to be a comma-separated file with 3 columns, and a header row as shown in the examples below.\n--samplesheet '[path to samplesheet file]'",
    "crumbs": [
      "Usage"
    ]
  },
  {
    "objectID": "usage.html#introduction",
    "href": "usage.html#introduction",
    "title": "Usage",
    "section": "",
    "text": "CERI-KRISP/CholeraSeq is a Nextflow pipeline for genomic data analysis of Cholera outbreaks.",
    "crumbs": [
      "Usage"
    ]
  },
  {
    "objectID": "usage.html#dataset",
    "href": "usage.html#dataset",
    "title": "Usage",
    "section": "",
    "text": "Zenodo Dataset",
    "crumbs": [
      "Usage"
    ]
  },
  {
    "objectID": "usage.html#samplesheet-input",
    "href": "usage.html#samplesheet-input",
    "title": "Usage",
    "section": "",
    "text": "You will need to create a samplesheet with information about the samples you would like to analyse before running the pipeline. Use this parameter to specify its location. It has to be a comma-separated file with 3 columns, and a header row as shown in the examples below.\n--samplesheet '[path to samplesheet file]'",
    "crumbs": [
      "Usage"
    ]
  },
  {
    "objectID": "usage.html#running-the-pipeline",
    "href": "usage.html#running-the-pipeline",
    "title": "Usage",
    "section": "Running the pipeline",
    "text": "Running the pipeline\n\nTest profiles\nA built-in test profile are available in the choleraseq pipeline with different size of datasets. This profile can be used to run tests on the relevant infrastructure using the test profile, to help users identify and resolve any infrastructural issue before the analysis stage.\nNOTE: The snippets below assumes you have docker on the sever/machine you wish to test the pipeline. For other institutional configs please refer nf-core/configs project, which are all applicable to this pipeline.\n\n$ nextflow run CERI-KRISP/CholeraSeq \\\n  -profile test,docker --outdir test_output\n\n\nUsing your own dataset\nThe command for running the pipeline is as follows:\nnextflow run CERI-KRISP/CholeraSeq \\\n         -profile docker \\\n         --samplesheet /path/to/samplesheet.csv \\\n         --outdir results\nThis will launch the pipeline with the docker configuration profile. See below for more information about profiles.\nNote that the pipeline will create the following files in your working directory:\nwork                # Directory containing the nextflow working files\n&lt;OUTDIR&gt;            # Finished results in specified location (defined with --outdir)\n.nextflow_log       # Log file from Nextflow\n# Other nextflow hidden files, eg. history of pipeline runs and old logs.\n\n\nUse of YAML file for parameters\nIf you wish to repeatedly use the same parameters for multiple runs, rather than specifying each flag in the command, you can specify these in a params file.\nPipeline settings can be provided in a yaml or json file via -params-file &lt;file&gt;.\n\n⚠️ Do not use -c &lt;file&gt; to specify parameters as this will result in errors. Custom config files specified with -c must only be used for tuning process resource specifications, other infrastructural tweaks (such as output directories), or module arguments (args).\n\nThe above pipeline run specified with a params file in yaml format:\nnextflow run ceri-krisp/choleraseq -profile docker -params-file params.yaml\nwith params.yaml containing:\ninput: './samplesheet.csv'\noutdir: './results/'\ngenome: 'GRCh37'\n# other parameters\nYou can also generate such YAML/JSON files via nf-core/launch.\n\n\nUpdating the pipeline\nWhen you run the above command, Nextflow automatically pulls the pipeline code from GitHub and stores it as a cached version. When running the pipeline after this, it will always use the cached version if available - even if the pipeline has been updated since. To make sure that you’re running the latest version of the pipeline, make sure that you regularly update the cached version of the pipeline:\nnextflow pull ceri-krisp/choleraseq\n\n\nReproducibility\nIt is a good idea to specify a pipeline version when running the pipeline on your data. This ensures that a specific version of the pipeline code and software are used when you run your pipeline. If you keep using the same tag, you’ll be running the same version of the pipeline, even if there have been changes to the code since.\nFirst, go to the ceri-krisp/choleraseq releases page and find the latest pipeline version - numeric only (eg. 1.3.1). Then specify this when running the pipeline with -r (one hyphen) - eg. -r 1.3.1. Of course, you can switch to another version by changing the number after the -r flag.\nThis version number will be logged in reports when you run the pipeline, so that you’ll know what you used when you look back in the future. For example, at the bottom of the MultiQC reports.\nTo further assist in reproducbility, you can use share and re-use parameter files to repeat pipeline runs with the same settings without having to write out a command with every single parameter.\n\n💡 If you wish to share such profile (such as upload as supplementary material for academic publications), make sure to NOT include cluster specific paths to files, nor institutional specific profiles.",
    "crumbs": [
      "Usage"
    ]
  },
  {
    "objectID": "usage.html#core-nextflow-arguments",
    "href": "usage.html#core-nextflow-arguments",
    "title": "Usage",
    "section": "Core Nextflow arguments",
    "text": "Core Nextflow arguments\n\nNB: These options are part of Nextflow and use a single hyphen (pipeline parameters use a double-hyphen).\n\n\n-profile\nUse this parameter to choose a configuration profile. Profiles can give configuration presets for different compute environments.\nSeveral generic profiles are bundled with the pipeline which instruct the pipeline to use software packaged using different methods (Docker, Singularity, Podman, Shifter, Charliecloud, Apptainer, Conda) - see below.\n\nWe highly recommend the use of Docker or Singularity containers for full pipeline reproducibility, however when this is not possible, Conda is also supported.\n\nThe pipeline also dynamically loads configurations from https://github.com/nf-core/configs when it runs, making multiple config profiles for various institutional clusters available at run time. For more information and to see if your system is available in these configs please see the nf-core/configs documentation.\nNote that multiple profiles can be loaded, for example: -profile test,docker - the order of arguments is important! They are loaded in sequence, so later profiles can overwrite earlier profiles.\nIf -profile is not specified, the pipeline will run locally and expect all software to be installed and available on the PATH. This is not recommended, since it can lead to different results on different machines dependent on the computer enviroment.\n\ntest\n\nA profile with a complete configuration for automated testing\nIncludes links to test data so needs no other parameters\n\ndocker\n\nA generic configuration profile to be used with Docker\n\nsingularity\n\nA generic configuration profile to be used with Singularity\n\npodman\n\nA generic configuration profile to be used with Podman\n\nshifter\n\nA generic configuration profile to be used with Shifter\n\ncharliecloud\n\nA generic configuration profile to be used with Charliecloud\n\napptainer\n\nA generic configuration profile to be used with Apptainer\n\nconda\n\nA generic configuration profile to be used with Conda. Please only use Conda as a last resort i.e. when it’s not possible to run the pipeline with Docker, Singularity, Podman, Shifter, Charliecloud, or Apptainer.\n\n\n\n\n-resume\nSpecify this when restarting a pipeline. Nextflow will use cached results from any pipeline steps where the inputs are the same, continuing from where it got to previously. For input to be considered the same, not only the names must be identical but the files’ contents as well. For more info about this parameter, see this blog post.\nYou can also supply a run name to resume a specific run: -resume [run-name]. Use the nextflow log command to show previous run names.\n\n\n-c\nSpecify the path to a specific config file (this is a core Nextflow command). See the nf-core website documentation for more information.",
    "crumbs": [
      "Usage"
    ]
  },
  {
    "objectID": "usage.html#custom-configuration",
    "href": "usage.html#custom-configuration",
    "title": "Usage",
    "section": "Custom configuration",
    "text": "Custom configuration\n\nResource requests\nWhilst the default requirements set within the pipeline will hopefully work for most people and with most input data, you may find that you want to customise the compute resources that the pipeline requests. Each step in the pipeline has a default set of requirements for number of CPUs, memory and time. For most of the steps in the pipeline, if the job exits with any of the error codes specified here it will automatically be resubmitted with higher requests (2 x original, then 3 x original). If it still fails after the third attempt then the pipeline execution is stopped.\nTo change the resource requests, please see the max resources and tuning workflow resources section of the nf-core website.\n\n\nCustom Containers\nIn some cases you may wish to change which container or conda environment a step of the pipeline uses for a particular tool. By default nf-core pipelines use containers and software from the biocontainers or bioconda projects. However in some cases the pipeline specified version maybe out of date.\nTo use a different container from the default container or conda environment specified in a pipeline, please see the updating tool versions section of the nf-core website.\n\n\nCustom Tool Arguments\nA pipeline might not always support every possible argument or option of a particular tool used in pipeline. Fortunately, nf-core pipelines provide some freedom to users to insert additional parameters that the pipeline does not include by default.\nTo learn how to provide additional arguments to a particular tool of the pipeline, please see the customising tool arguments section of the nf-core website.\n\n\nnf-core/configs\nIn most cases, you will only need to create a custom config as a one-off but if you and others within your organisation are likely to be running nf-core pipelines regularly and need to use the same settings regularly it may be a good idea to request that your custom config file is uploaded to the nf-core/configs git repository. Before you do this please can you test that the config file works with your pipeline of choice using the -c parameter. You can then create a pull request to the nf-core/configs repository with the addition of your config file, associated documentation file (see examples in nf-core/configs/docs), and amending nfcore_custom.config to include your custom profile.\nSee the main Nextflow documentation for more information about creating your own configuration files.\nIf you have any questions or issues please send us a message on Slack on the #configs channel.",
    "crumbs": [
      "Usage"
    ]
  },
  {
    "objectID": "usage.html#azure-resource-requests",
    "href": "usage.html#azure-resource-requests",
    "title": "Usage",
    "section": "Azure Resource Requests",
    "text": "Azure Resource Requests\nTo be used with the azurebatch profile by specifying the -profile azurebatch. We recommend providing a compute params.vm_type of Standard_D16_v3 VMs by default but these options can be changed if required.\nNote that the choice of VM size depends on your quota and the overall workload during the analysis. For a thorough list, please refer the Azure Sizes for virtual machines in Azure.",
    "crumbs": [
      "Usage"
    ]
  },
  {
    "objectID": "usage.html#running-in-the-background",
    "href": "usage.html#running-in-the-background",
    "title": "Usage",
    "section": "Running in the background",
    "text": "Running in the background\nNextflow handles job submissions and supervises the running jobs. The Nextflow process must run until the pipeline is finished.\nThe Nextflow -bg flag launches Nextflow in the background, detached from your terminal so that the workflow does not stop if you log out of your session. The logs are saved to a file.\nAlternatively, you can use screen / tmux or similar tool to create a detached session which you can log back into at a later time. Some HPC setups also allow you to run nextflow within a cluster job submitted your job scheduler (from where it submits more jobs).",
    "crumbs": [
      "Usage"
    ]
  },
  {
    "objectID": "usage.html#nextflow-memory-requirements",
    "href": "usage.html#nextflow-memory-requirements",
    "title": "Usage",
    "section": "Nextflow memory requirements",
    "text": "Nextflow memory requirements\nIn some cases, the Nextflow Java virtual machines can start to request a large amount of memory. We recommend adding the following line to your environment to limit this (typically in ~/.bashrc or ~./bash_profile):\nNXF_OPTS='-Xms1g -Xmx4g'",
    "crumbs": [
      "Usage"
    ]
  },
  {
    "objectID": "parameters.html",
    "href": "parameters.html",
    "title": "Parameters",
    "section": "",
    "text": "This document provides an overview of the customizable parameters for the CHOLERASEQ pipeline. Each parameter is listed with its default value, description.\n\n💡 Hint: you may check a full parameters reference file.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nParameter\nDefault Value\nDescription\n\n\n\n\ninput\nnull\nThe input CSV file containing sample information.\n\n\n\n\n💡 Hint: The samplesheet should include the columns [sample,fastq_1,fastq_2].\n\n\n\n\n\n\n\n\n\n\n\n\n\nParameter\nDefault Value\nDescription\n\n\n\n\noutdir\nnull\nThe directory where all output files will be written.\n\n\n\n\n\n\n\n\n\n⚠️ Attention: Ensure these values are adjusted based on the quality of your input data to avoid processing errors. The defaults are set to faciliate a majority of users. Only advanced users are recommended to change these.\n\n\n\n\n\n\n\n\n\nParameter\nDefault Value\nDescription\n\n\n\n\nmin_trim_quality\n20\nFastq reads mean quality threshold 20 fastp\n\n\nmin_trim_length\n50\nFastq read minimum trim length 50 fastp\n\n\nmin_mapping_quality\n20\nminimum mapping quality 20 samtools consensus samtools –min-MQ\n\n\nmin_base_quality\n20\nminimum base quality 20 samtools consensus samtools –min-BQ\n\n\nmin_site_coverage\n5\nmimimum site coverage 5 samtools consensus + snippy samtools –min-depth 5; snippy –mincov 5\n\n\nmin_allele_fraction\n0.75\nminimum fraction supporting allele call 0.75 samtools consensus + snippy samtools -c 0.75; snippy –minfrac 0.75\n\n\nmax_missing_percentage\n50\nPercentage of missing data allowed in a sample before it is excluded from the analysis. max_missing_percentage 0.5 seqcleaner, gubbins max percentage of undefined sites in any consensus fasta sequence\n\n\nmin_parsimony_coverage\n0.7\nvarcodons.py pi job minimum site coverage for varcodons to keep site when generating pi output\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nParameter\nDefault Value\nDescription\n\n\n\n\nskip_clustering\nfalse\nIndicate whether you wish to enable the clustering anlysis.\n\n\nskip_fastbaps\ntrue\nIndicate whether to skip fastbaps or not.\n\n\n\n\n💡 Hint: Use these flags to customize the pipeline execution based on your specific requirements.\n\n\n\n\n\n\n\n\n\n\n\n\n\nParameter\nDefault Value\nDescription\n\n\n\n\nfasta\nnull\nPath to the reference fasta file.\n\n\n\n\n⚠️ Warning: It is recommended to use the provided reference files to ensure compatibility with the global core alignment.",
    "crumbs": [
      "Parameters"
    ]
  },
  {
    "objectID": "parameters.html#common-parameters",
    "href": "parameters.html#common-parameters",
    "title": "Parameters",
    "section": "",
    "text": "Parameter\nDefault Value\nDescription\n\n\n\n\ninput\nnull\nThe input CSV file containing sample information.\n\n\n\n\n💡 Hint: The samplesheet should include the columns [sample,fastq_1,fastq_2].\n\n\n\n\n\n\n\n\n\n\n\n\n\nParameter\nDefault Value\nDescription\n\n\n\n\noutdir\nnull\nThe directory where all output files will be written.",
    "crumbs": [
      "Parameters"
    ]
  },
  {
    "objectID": "parameters.html#quality-control-parameters",
    "href": "parameters.html#quality-control-parameters",
    "title": "Parameters",
    "section": "",
    "text": "⚠️ Attention: Ensure these values are adjusted based on the quality of your input data to avoid processing errors. The defaults are set to faciliate a majority of users. Only advanced users are recommended to change these.\n\n\n\n\n\n\n\n\n\nParameter\nDefault Value\nDescription\n\n\n\n\nmin_trim_quality\n20\nFastq reads mean quality threshold 20 fastp\n\n\nmin_trim_length\n50\nFastq read minimum trim length 50 fastp\n\n\nmin_mapping_quality\n20\nminimum mapping quality 20 samtools consensus samtools –min-MQ\n\n\nmin_base_quality\n20\nminimum base quality 20 samtools consensus samtools –min-BQ\n\n\nmin_site_coverage\n5\nmimimum site coverage 5 samtools consensus + snippy samtools –min-depth 5; snippy –mincov 5\n\n\nmin_allele_fraction\n0.75\nminimum fraction supporting allele call 0.75 samtools consensus + snippy samtools -c 0.75; snippy –minfrac 0.75\n\n\nmax_missing_percentage\n50\nPercentage of missing data allowed in a sample before it is excluded from the analysis. max_missing_percentage 0.5 seqcleaner, gubbins max percentage of undefined sites in any consensus fasta sequence\n\n\nmin_parsimony_coverage\n0.7\nvarcodons.py pi job minimum site coverage for varcodons to keep site when generating pi output",
    "crumbs": [
      "Parameters"
    ]
  },
  {
    "objectID": "parameters.html#skipping-pipeline-steps",
    "href": "parameters.html#skipping-pipeline-steps",
    "title": "Parameters",
    "section": "",
    "text": "Parameter\nDefault Value\nDescription\n\n\n\n\nskip_clustering\nfalse\nIndicate whether you wish to enable the clustering anlysis.\n\n\nskip_fastbaps\ntrue\nIndicate whether to skip fastbaps or not.\n\n\n\n\n💡 Hint: Use these flags to customize the pipeline execution based on your specific requirements.",
    "crumbs": [
      "Parameters"
    ]
  },
  {
    "objectID": "parameters.html#reference-files",
    "href": "parameters.html#reference-files",
    "title": "Parameters",
    "section": "",
    "text": "Parameter\nDefault Value\nDescription\n\n\n\n\nfasta\nnull\nPath to the reference fasta file.\n\n\n\n\n⚠️ Warning: It is recommended to use the provided reference files to ensure compatibility with the global core alignment.",
    "crumbs": [
      "Parameters"
    ]
  },
  {
    "objectID": "output.html",
    "href": "output.html",
    "title": "Output",
    "section": "",
    "text": "This document describes the output produced by the pipeline. Most of the plots are taken from the MultiQC report, which summarises results at the end of the pipeline.\nThe directories listed below will be created in the results directory after the pipeline has finished. All paths are relative to the top-level results directory.\n\n\n\n\nThe pipeline is built using Nextflow and processes data using the following steps:\n\n\n\n\nOutput files\n\n\nfastqc/\n\n*_fastqc.html: FastQC report containing quality metrics.\n*_fastqc.zip: Zip archive containing the FastQC report, tab-delimited data file and plot images.\n\n\n\nFastQC gives general quality metrics about your sequenced reads. It provides information about the quality score distribution across your reads, per base sequence content (%A/T/G/C), adapter contamination and overrepresented sequences. For further reading and documentation see the FastQC help pages.\n\n\n\n\n\nOutput files\n\n\nmultiqc/\n\nmultiqc_report.html: a standalone HTML file that can be viewed in your web browser.\nmultiqc_data/: directory containing parsed statistics from the different tools used in the pipeline.\nmultiqc_plots/: directory containing static images from the report in various formats.\n\n\n\nMultiQC is a visualization tool that generates a single HTML report summarising all samples in your project. Most of the pipeline QC results are visualised in the report and further statistics are available in the report data directory.\n\n\n\nMultiQC report generated for target-methylseq-qc, in picard-profiler highlighting the refine metrics from targeted sequencing at 10X, 20X, 30X and 50X coverage.\n\n\nResults generated by MultiQC collate pipeline QC from supported tools e.g. FastQC. The pipeline has special steps which also allow the software versions to be reported in the MultiQC output for future traceability. For more information about how to use MultiQC reports, see http://multiqc.info.\n\n\n\n\n\nOutput files\n\n\npipeline_info/\n\nReports generated by Nextflow: execution_report.html, execution_timeline.html, execution_trace.txt and pipeline_dag.dot/pipeline_dag.svg.\nReports generated by the pipeline: pipeline_report.html, pipeline_report.txt and software_versions.yml. The pipeline_report* files will only be present if the --email / --email_on_fail parameter’s are used when running the pipeline.\nReformatted samplesheet files used as input to the pipeline: samplesheet.valid.csv.\n\n\n\nNextflow provides excellent functionality for generating various reports relevant to the running and execution of the pipeline. This will allow you to troubleshoot errors with the running of the pipeline, and also provide you with other information such as launch commands, run times and resource usage.",
    "crumbs": [
      "Output"
    ]
  },
  {
    "objectID": "output.html#introduction",
    "href": "output.html#introduction",
    "title": "Output",
    "section": "",
    "text": "This document describes the output produced by the pipeline. Most of the plots are taken from the MultiQC report, which summarises results at the end of the pipeline.\nThe directories listed below will be created in the results directory after the pipeline has finished. All paths are relative to the top-level results directory.",
    "crumbs": [
      "Output"
    ]
  },
  {
    "objectID": "output.html#pipeline-overview",
    "href": "output.html#pipeline-overview",
    "title": "Output",
    "section": "",
    "text": "The pipeline is built using Nextflow and processes data using the following steps:\n\n\n\n\nOutput files\n\n\nfastqc/\n\n*_fastqc.html: FastQC report containing quality metrics.\n*_fastqc.zip: Zip archive containing the FastQC report, tab-delimited data file and plot images.\n\n\n\nFastQC gives general quality metrics about your sequenced reads. It provides information about the quality score distribution across your reads, per base sequence content (%A/T/G/C), adapter contamination and overrepresented sequences. For further reading and documentation see the FastQC help pages.\n\n\n\n\n\nOutput files\n\n\nmultiqc/\n\nmultiqc_report.html: a standalone HTML file that can be viewed in your web browser.\nmultiqc_data/: directory containing parsed statistics from the different tools used in the pipeline.\nmultiqc_plots/: directory containing static images from the report in various formats.\n\n\n\nMultiQC is a visualization tool that generates a single HTML report summarising all samples in your project. Most of the pipeline QC results are visualised in the report and further statistics are available in the report data directory.\n\n\n\nMultiQC report generated for target-methylseq-qc, in picard-profiler highlighting the refine metrics from targeted sequencing at 10X, 20X, 30X and 50X coverage.\n\n\nResults generated by MultiQC collate pipeline QC from supported tools e.g. FastQC. The pipeline has special steps which also allow the software versions to be reported in the MultiQC output for future traceability. For more information about how to use MultiQC reports, see http://multiqc.info.\n\n\n\n\n\nOutput files\n\n\npipeline_info/\n\nReports generated by Nextflow: execution_report.html, execution_timeline.html, execution_trace.txt and pipeline_dag.dot/pipeline_dag.svg.\nReports generated by the pipeline: pipeline_report.html, pipeline_report.txt and software_versions.yml. The pipeline_report* files will only be present if the --email / --email_on_fail parameter’s are used when running the pipeline.\nReformatted samplesheet files used as input to the pipeline: samplesheet.valid.csv.\n\n\n\nNextflow provides excellent functionality for generating various reports relevant to the running and execution of the pipeline. This will allow you to troubleshoot errors with the running of the pipeline, and also provide you with other information such as launch commands, run times and resource usage.",
    "crumbs": [
      "Output"
    ]
  }
]